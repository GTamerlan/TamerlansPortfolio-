/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! https://cdn.jsdelivr.net/npm/three@0.168.0/build/three.module.js */ \"https://cdn.jsdelivr.net/npm/three@0.168.0/build/three.module.js\");\n/* harmony import */ var https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/loaders/GLTFLoader.js */ \"https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/loaders/GLTFLoader.js\");\n/* harmony import */ var https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/controls/OrbitControls.js */ \"https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_csm_CSM_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/csm/CSM.js */ \"https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/csm/CSM.js\");\n/* harmony import */ var https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_csm_CSMHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/csm/CSMHelper.js */ \"https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/csm/CSMHelper.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__, https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_1__, https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__, https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_csm_CSM_js__WEBPACK_IMPORTED_MODULE_3__, https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_csm_CSMHelper_js__WEBPACK_IMPORTED_MODULE_4__]);\n([https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__, https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_1__, https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__, https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_csm_CSM_js__WEBPACK_IMPORTED_MODULE_3__, https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_csm_CSMHelper_js__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar clock = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Clock(); // Create a clock to track delta time\r\nvar mixer; // Animation mixer to control animations\r\nconst gltfLoader = new https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_1__.GLTFLoader();\r\nlet scene, camera, renderer, controls, marsBase, roverModel, roverAction, roverSound;\r\nlet isDragging = false; // Track if the user is dragging the mouse\r\nlet isMouseDown = false; // Track if the mouse is currently held down\r\nlet rotationSpeed = 0.002; // Speed at which the environment rotates\r\nlet rotationAngle = 0; // Track the environment's rotation\r\nlet lastMouseX = 0; // Track the last mouse X position\r\nlet mouseDeltaX = 0; // Track the mouse movement delta\r\nlet inertia = 0; // Track inertia for smooth rotation after dragging stops\r\nlet previousRotation = 0; // Track previous rotation to detect changes\r\nconst rotationThreshold = 0.001; // Tolerance for detecting significant rotation changes\r\n\r\n// Initialize the scene, camera, renderer, and controls\r\nfunction init() {\r\n    // Scene setup\r\n    scene = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Scene();\r\n\r\n    // Camera setup\r\n    camera = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.set(1, 5, 10);\r\n\r\n    // Renderer setup\r\n    renderer = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer({ antialias: true, powerPreference: 'high-performance' });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setPixelRatio(window.devicePixelRatio); // Set pixel ratio for sharper image\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    // OrbitControls for smooth camera movement\r\n    controls = new https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__.OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true; // Smooth camera movement\r\n    controls.dampingFactor = 0.02; // Increase damping for slower, smoother rotation\r\n    controls.enablePan = false; // Disable panning\r\n    controls.minDistance = 8; // Set minimum zoom distance\r\n    controls.maxDistance = 10.4; // Set maximum zoom distance\r\n\r\n    // Allow vertical rotation, but no horizontal rotation\r\n    controls.minAzimuthAngle = 0; // Lock horizontal rotation\r\n    controls.maxAzimuthAngle = 0; // Lock horizontal rotation\r\n    controls.minPolarAngle = Math.PI / 2.36; // Set a minimum vertical angle\r\n    controls.maxPolarAngle = Math.PI / 2.2; // Set a maximum vertical angle\r\n     // Lighting setup\r\n    \r\n    // Create the gradient skybox\r\n    createGradientSkybox();\r\n\r\n    // Load the Mars terrain and rover model\r\n    createMarsTerrain();\r\n    createBlueCube();\r\n    addEnvironmentDetails();\r\n    setupLighting();\r\n    // Set default cursor to grab\r\n    document.body.style.cursor = 'grab';\r\n\r\n    // Handle window resizing\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    // Add mouse event listeners for dragging and pressing the mouse button\r\n    document.addEventListener('mousedown', onMouseDown);\r\n    document.addEventListener('mousemove', onMouseMove);\r\n    document.addEventListener('mouseup', onMouseUp);\r\n}\r\n\r\n// Enhanced Lighting Setup\r\nfunction setupLighting() {\r\n    // Create a group for lights to manage them collectively\r\n    const lightsGroup = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Group();\r\n\r\n    // Directional Light (Sunlight)\r\n    const directionalLight = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.DirectionalLight(0x81d3fc, 2);\r\n    directionalLight.position.set(10, 20, 10);\r\n    directionalLight.castShadow = true;\r\n\r\n    // Configure shadow properties\r\n    directionalLight.shadow.mapSize.width = 2048;\r\n    directionalLight.shadow.mapSize.height = 2048;\r\n    directionalLight.shadow.camera.near = 0.5;\r\n    directionalLight.shadow.camera.far = 100;\r\n    directionalLight.shadow.camera.left = -15;\r\n    directionalLight.shadow.camera.right = 15;\r\n    directionalLight.shadow.camera.top = 15;\r\n    directionalLight.shadow.camera.bottom = -15;\r\n\r\n    lightsGroup.add(directionalLight);\r\n\r\n    // Spot Light (Focused Spotlight)\r\n    const spotLight = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SpotLight(0x81d3fc, 2);\r\n    spotLight.position.set(-15, 25, 15);\r\n    spotLight.angle = Math.PI / 6; // Narrow beam\r\n    spotLight.castShadow = true;\r\n    spotLight.shadow.mapSize.width = 1024;\r\n    spotLight.shadow.mapSize.height = 1024;\r\n    spotLight.shadow.camera.near = 0.5;\r\n    spotLight.shadow.camera.far = 50;\r\n\r\n    lightsGroup.add(spotLight);\r\n\r\n    // Add a helper for the spotlight\r\n    const spotLightHelper = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SpotLightHelper(spotLight);\r\n    //scene.add(spotLightHelper);\r\n\r\n    // Point Light (Emulating a glowing object)\r\n    const pointLight = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PointLight(0x81d3fc, 1, 50); // Soft orange light\r\n    pointLight.position.set(0, 10, 0);\r\n    pointLight.castShadow = true;\r\n\r\n    lightsGroup.add(pointLight);\r\n\r\n    // Add a helper for the point light\r\n    const pointLightHelper = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PointLightHelper(pointLight);\r\n    //scene.add(pointLightHelper);\r\n\r\n    // Ambient Light (Soft global illumination)\r\n    const ambientLight = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.AmbientLight(0x404040, 0.8); // Soft gray\r\n    lightsGroup.add(ambientLight);\r\n\r\n    \r\n\r\n  \r\n\r\n    // Add the lights group to the scene\r\n    scene.add(lightsGroup);\r\n} \r\n\r\n\r\n\r\n \r\n// Setup rover sound using AudioListener and PositionalAudio\r\nfunction setupAudio() {\r\n    const listener = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.AudioListener();\r\n    camera.add(listener); // Attach the listener to the camera\r\n\r\n    roverSound = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PositionalAudio(listener);\r\n    const audioLoader = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.AudioLoader();\r\n\r\n    // Load the audio file (replace the URL with your preferred sound file later)\r\n    /*\r\n    audioLoader.load('./roversound.mp3', (buffer) => {\r\n        roverSound.setBuffer(buffer);\r\n        roverSound.setLoop(true);\r\n        roverSound.setVolume(8); // Lower volume for ambient sound effect\r\n    });\r\n    */\r\n}\r\n\r\n\r\nlet classroomModel, treeModel; // Declare variables to store references to the models\r\n\r\nfunction addEnvironmentDetail(modelPath, scale, position, rotation, modelName) {\r\n    gltfLoader.load(modelPath, (gltfScene) => {\r\n        const model = gltfScene.scene;\r\n\r\n        // Set scale, position, and rotation based on input parameters\r\n        model.scale.set(scale.x, scale.y, scale.z);\r\n        model.position.set(position.x, position.y, position.z);\r\n        model.rotation.set(rotation.x, rotation.y, rotation.z);\r\n\r\n        // Enable shadow casting and receiving\r\n        model.traverse((child) => {\r\n            if (child.isMesh) {\r\n                child.castShadow = true;\r\n                child.receiveShadow = true;\r\n\r\n                // Check and apply anisotropic filtering for textures\r\n                if (child.material.map) {\r\n                    const texture = child.material.map;\r\n                    texture.anisotropy = renderer.capabilities.getMaxAnisotropy();\r\n                    texture.needsUpdate = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Store the reference of the model for later rotation\r\n        if (modelName === 'classroom') {\r\n            classroomModel = model;\r\n        } else if (modelName === 'tree') {\r\n            treeModel = model;\r\n        }\r\n        scene.add(model);\r\n        \r\n    });\r\n}\r\n\r\n// Now, use this function to load multiple models and track them\r\nfunction addEnvironmentDetails() {\r\n    // Add a classroom model and track it\r\n    addEnvironmentDetail(\r\n        './low_poly_moon/scene.gltf',            // Path to the GLTF model\r\n        { x: 0.1, y: 0.1, z: 0.1 },           // Scale for the model\r\n        { x: 13, y: 4, z: -6},              // Position in the scene\r\n\r\n        { x: 0, y: Math.PI / 2, z: 0},        // Rotation (optional)\r\n        'classroom'                            // Model name for tracking\r\n    );\r\n\r\n    // Add a tree model and track it\r\n    addEnvironmentDetail(\r\n        './rotunda_spsace_ship/scene.gltf',            // Path to the GLTF model\r\n        { x: 0.001, y: 0.001, z: 0.001 },           // Scale for the model\r\n        { x: 1, y: 1, z: 6.5 },                // Position in the scene\r\n        { x: 0, y: Math.PI / 4, z: 0 },        // Rotation (optional)\r\n        'tree'                                // Model name for tracking\r\n    );\r\n}\r\n\r\n\r\n// Create a gradient skybox that resembles a Martian sky\r\nfunction createGradientSkybox() {\r\n    // Create a gradient background sky\r\n    const skyGeometry = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SphereGeometry(1000, 64, 64);\r\n    const skyMaterial = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial({\r\n        uniforms: {\r\n            topColor: { value: new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Color(0x2a1a5e) }, // Deep purple\r\n            bottomColor: { value: new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Color(0x000000) }, // Black\r\n            offset: { value: 400 },\r\n            exponent: { value: 0.6 },\r\n        },\r\n        vertexShader: `\r\n            varying vec3 vWorldPosition;\r\n            void main() {\r\n                vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n                vWorldPosition = worldPosition.xyz;\r\n                gl_Position = projectionMatrix * viewMatrix * worldPosition;\r\n            }\r\n        `,\r\n        fragmentShader: `\r\n            uniform vec3 topColor;\r\n            uniform vec3 bottomColor;\r\n            uniform float offset;\r\n            uniform float exponent;\r\n            varying vec3 vWorldPosition;\r\n            void main() {\r\n                float h = normalize(vWorldPosition + offset).y;\r\n                gl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h, 0.0), exponent), 0.0)), 1.0);\r\n            }\r\n        `,\r\n        side: https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.BackSide,\r\n    });\r\n    const gradientSky = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Mesh(skyGeometry, skyMaterial);\r\n    scene.add(gradientSky);\r\n\r\n    // Add stars using a Points system\r\n    const starGeometry = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();\r\n    const starCount = 2000;\r\n    const starPositions = new Float32Array(starCount * 3);\r\n\r\n    for (let i = 0; i < starCount; i++) {\r\n        starPositions[i * 3] = (Math.random() - 0.5) * 2000; // X position\r\n        starPositions[i * 3 + 1] = (Math.random() - 0.5) * 2000; // Y position\r\n        starPositions[i * 3 + 2] = (Math.random() - 0.5) * 2000; // Z position\r\n    }\r\n    starGeometry.setAttribute('position', new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(starPositions, 3));\r\n    const starMaterial = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PointsMaterial({\r\n        color: 0xffffff,\r\n        size: 1.5,\r\n        sizeAttenuation: true,\r\n        transparent: true,\r\n        opacity: 0.8,\r\n    });\r\n    const stars = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Points(starGeometry, starMaterial);\r\n    scene.add(stars);\r\n\r\n    // Add glowing galaxies using SpriteMaterial\r\n    const galaxyCount = 10;\r\n    const galaxies = [];\r\n    const spriteMaterial = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SpriteMaterial({\r\n        map: new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.TextureLoader().load('./textures/glow.png'), // Replace with your galaxy texture\r\n        color: 0xff69b4, // Glowing pink\r\n        transparent: true,\r\n        opacity: 0.6,\r\n    });\r\n\r\n    for (let i = 0; i < galaxyCount; i++) {\r\n        const sprite = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Sprite(spriteMaterial);\r\n        sprite.scale.set(150, 150, 1); // Make the galaxy large\r\n        sprite.position.set(\r\n            (Math.random() - 0.5) * 1500,\r\n            (Math.random() - 0.5) * 1500,\r\n            (Math.random() - 0.5) * 1500\r\n        );\r\n        galaxies.push(sprite);\r\n        scene.add(sprite);\r\n    }\r\n\r\n    // Add comets\r\n    const comets = [];\r\n    const cometCount = 5;\r\n    const cometMaterial = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({ color: 0xffa500, emissive: 0xff4500 });\r\n    for (let i = 0; i < cometCount; i++) {\r\n        const cometGeometry = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SphereGeometry(2, 8, 8);\r\n        const comet = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Mesh(cometGeometry, cometMaterial);\r\n        comet.position.set(\r\n            (Math.random() - 0.5) * 1000,\r\n            (Math.random() - 0.5) * 1000,\r\n            (Math.random() - 0.5) * 1000\r\n        );\r\n        comets.push({ comet, velocity: new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3(Math.random() * 0.2, Math.random() * 0.2, Math.random() * 0.2) });\r\n        scene.add(comet);\r\n    }\r\n\r\n    // Animate stars, galaxies, and comets\r\n    function animateSkybox() {\r\n        // Twinkle stars\r\n        const starPositions = starGeometry.attributes.position.array;\r\n        for (let i = 0; i < starCount; i++) {\r\n            starPositions[i * 3 + 1] -= 0.1; // Simulate subtle movement\r\n            if (starPositions[i * 3 + 1] < -1000) starPositions[i * 3 + 1] = 1000;\r\n        }\r\n        starGeometry.attributes.position.needsUpdate = true;\r\n\r\n        // Rotate galaxies slightly for dynamic effect\r\n        galaxies.forEach((galaxy) => {\r\n            galaxy.rotation.z += 0.001; // Subtle spinning\r\n        });\r\n\r\n        // Move comets\r\n        comets.forEach(({ comet, velocity }) => {\r\n            comet.position.add(velocity);\r\n            if (comet.position.length() > 800) {\r\n                comet.position.set(\r\n                    (Math.random() - 0.5) * 1000,\r\n                    (Math.random() - 0.5) * 1000,\r\n                    (Math.random() - 0.5) * 1000\r\n                );\r\n            }\r\n        });\r\n\r\n        requestAnimationFrame(animateSkybox);\r\n    }\r\n\r\n    animateSkybox();\r\n}\r\n\r\n\r\n\r\n\r\n// Handle mouse down event to start dragging and trigger rover animation\r\nfunction onMouseDown(event) {\r\n    isMouseDown = true; // Mark the mouse as being held down\r\n    isDragging = true; // Start dragging\r\n    lastMouseX = event.clientX; // Record the initial mouse position\r\n\r\n    // Resume the rover animation by setting timeScale to 1 (normal speed)\r\n    if (roverAction) {\r\n        roverAction.timeScale = 2.2; // Resume the animation\r\n        if (!roverSound.isPlaying) {\r\n            roverSound.play(); // Play the sound when the rover starts moving\r\n        }\r\n    }\r\n}\r\n\r\n// Handle mouse move event to calculate mouse delta\r\nfunction onMouseMove(event) {\r\n    if (isDragging) {\r\n        // Calculate how much the mouse has moved since the last frame\r\n        mouseDeltaX = event.clientX - lastMouseX;\r\n        lastMouseX = event.clientX; // Update the last mouse X position for the next frame\r\n        inertia = mouseDeltaX * 0.02; // Set inertia based on mouse movement\r\n    }\r\n}\r\n\r\n// Handle mouse up event to stop dragging\r\nfunction onMouseUp() {\r\n    isMouseDown = false; // Mark the mouse as no longer held down\r\n    isDragging = false; // Stop dragging\r\n    mouseDeltaX = 0; // Reset the mouse delta when dragging stops\r\n\r\n    // Pause the rover animation and stop the sound\r\n    if (roverAction) {\r\n        roverAction.timeScale = 0; // Pause the animation\r\n        if (roverSound.isPlaying) {\r\n            roverSound.stop(); // Stop the sound when the rover stops moving\r\n        }\r\n    }\r\n}\r\n\r\n// Create the Mars terrain and environment\r\nfunction createMarsTerrain() {\r\n    gltfLoader.load('./myterrain/terrain.gltf', (gltfScene) => {\r\n        marsBase = gltfScene.scene;\r\n        \r\n\r\n        let landscape = marsBase.getObjectByName('Landscape_2');\r\n        let plane = marsBase.getObjectByName('Plane_1');\r\n        let circle = marsBase.getObjectByName('Circle_1');\r\n\r\n        // Create different materials\r\n        const landscapeMaterial = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ color: 0xe39796}); // Terrain color\r\n        const planeMaterial = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ color: 0xa2a980}); // Lake color\r\n        const circleMaterial = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({ color: 0x7b7b7b}); // Road color\r\n\r\n        // Apply the materials to the corresponding meshes\r\n        if (landscape) landscape.material = landscapeMaterial;\r\n        if (plane) plane.material = planeMaterial;\r\n        if (circle) circle.material = circleMaterial;\r\n        // Traverse the scene to ensure all meshes are processed\r\n        marsBase.traverse((child) => {\r\n            if (child.isMesh) {\r\n                child.castShadow = true; // Allow shadow casting\r\n                child.receiveShadow = true; // Allow shadow receiving\r\n\r\n                // Check and apply anisotropic filtering for textures\r\n                if (child.material.map) {\r\n                    const texture = child.material.map;\r\n                    texture.anisotropy = renderer.capabilities.getMaxAnisotropy(); // Maximize texture quality\r\n                    texture.needsUpdate = true;\r\n                }\r\n            }\r\n        });\r\n        if (gltfScene.animations.length > 0) {\r\n            const terrainMixer = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.AnimationMixer(marsBase);\r\n\r\n            // Loop through all animations and play them\r\n            gltfScene.animations.forEach((clip) => {\r\n                const action = terrainMixer.clipAction(clip);\r\n                action.loop = https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.LoopRepeat; // Ensure looping\r\n                action.clampWhenFinished = true; // Prevent flickering after looping\r\n                action.play(); // Play the animation\r\n            });\r\n\r\n            // Add terrain mixer update to the animation loop\r\n            animateMixers.push((deltaTime) => {\r\n                terrainMixer.update(deltaTime);\r\n            });\r\n        } else {\r\n            console.warn('No animations found in the terrain GLTF file.');\r\n        }\r\n        // Scale and position the terrain to ensure animation matches geometry\r\n        marsBase.scale.set(0.75, 0.75, 0.75); // Adjust as necessary\r\n        marsBase.position.set(0, 0, 0); // Center the terrain\r\n\r\n        // Add the terrain to the scene\r\n        scene.add(marsBase);\r\n\r\n        // Process animations, ensuring compatibility with all clips\r\n        \r\n    });\r\n}\r\n\r\n\r\n// Create the Mars Rover model and set up animations\r\nfunction createBlueCube() {\r\n    // Load the Mars Rover model\r\n    gltfLoader.load('./Rover/rover.gltf', (gltfScene) => {\r\n        roverModel = gltfScene.scene;\r\n\r\n        // Scale down the Mars Rover model to make it smaller\r\n        roverModel.scale.set(0.16, 0.16, 0.16); // Adjust scale as necessary\r\n        roverModel.rotation.y = -Math.PI * 1.6; // Rotate to face the correct direction\r\n\r\n        // Enable shadow casting\r\n        roverModel.castShadow = true;\r\n\r\n        // Set initial position (keep it fixed)\r\n        roverModel.position.set(0.4, 0.7, 8.3); // Adjust y-position as necessary\r\n\r\n        // Add the rover model to the scene\r\n        roverModel.add(roverSound); // Attach the sound to the rover\r\n        scene.add(roverModel);\r\n\r\n        // Initialize the animation mixer for animations\r\n        mixer = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.AnimationMixer(roverModel);\r\n\r\n        // Set up rover animations but do not play them immediately\r\n        if (gltfScene.animations.length > 0) {\r\n            roverAction = mixer.clipAction(gltfScene.animations[0]); // Use the first animation\r\n            roverAction.loop = https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.LoopRepeat; // Loop the animation\r\n            roverAction.play(); // Start the animation but paused by timeScale\r\n            roverAction.timeScale = 0; // Start the animation paused\r\n        }\r\n    });\r\n\r\n    // Enhance lighting with additional lights for the rover\r\n    addRoverLighting();\r\n}\r\n\r\n// Add additional lighting to highlight the rover\r\nfunction addRoverLighting() {\r\n    const pointLight = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PointLight(0x1942ff, 200, 300);\r\n    pointLight.position.set(-5, 2, 0);\r\n    pointLight.castShadow = true;\r\n\r\n    const pointLight3 = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PointLight(0xfff189, 28, 300);\r\n    pointLight3.position.set(0.4, 3, 8.3);\r\n    pointLight3.castShadow = true;\r\n    scene.add(pointLight3);\r\n\r\n    const spotLight = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SpotLight(0x2cc1f9, 100, 50);\r\n    spotLight.position.set(5, 10, 5);\r\n    spotLight.angle = Math.PI / 6;\r\n    spotLight.penumbra = 0.5;\r\n    spotLight.decay = 2;\r\n    spotLight.distance = 2;\r\n    spotLight.castShadow = true;\r\n\r\n    scene.add(spotLight);\r\n}\r\n\r\n// Rotate the entire environment around the rover based on mouse movement\r\nfunction rotateEnvironment() {\r\n    if (marsBase) {\r\n        // Apply inertia to smooth out the rotation after dragging stops\r\n        inertia *= 0.92; // Gradually reduce inertia\r\n        rotationAngle += inertia; // Apply inertia to the rotation angle\r\n\r\n        // Apply rotation to marsBase around the Y-axis (environment rotation)\r\n        marsBase.rotation.y = rotationAngle * 0.04;\r\n\r\n        // Calculate the rotation difference between the current and previous rotation\r\n        const rotationDifference = Math.abs(marsBase.rotation.y - previousRotation);\r\n\r\n        // Check if the rotation change exceeds the threshold\r\n        if (rotationDifference > rotationThreshold) {\r\n            // If rotation is changing significantly, continue rover animation\r\n            if (roverAction) roverAction.timeScale = 2.2;\r\n        } else {\r\n            // If rotation change is below the threshold, pause the rover animation\r\n            if (roverAction) roverAction.timeScale = 0;\r\n        }\r\n\r\n        // Update previous rotation\r\n        previousRotation = marsBase.rotation.y;\r\n    }\r\n    if (treeModel) {\r\n        // Apply inertia to smooth out the rotation after dragging stops\r\n        inertia *= 0.92; // Gradually reduce inertia\r\n        rotationAngle += inertia; // Apply inertia to the rotation angle\r\n\r\n        // Apply rotation to marsBase around the Y-axis (environment rotation)\r\n        classroomModel.rotation.y = rotationAngle * 0.04;\r\n\r\n        // Calculate the rotation difference between the current and previous rotation\r\n        const rotationDifference = Math.abs(classroomModel.rotation.y - previousRotation);\r\n\r\n        // Check if the rotation change exceeds the threshold\r\n        if (rotationDifference > rotationThreshold) {\r\n            // If rotation is changing significantly, continue rover animation\r\n            if (roverAction) roverAction.timeScale = 2.2;\r\n        } else {\r\n            // If rotation change is below the threshold, pause the rover animation\r\n            if (roverAction) roverAction.timeScale = 0;\r\n        }\r\n\r\n        // Update previous rotation\r\n        previousRotation = classroomModel.rotation.y;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst animateMixers = []; // Store functions to update animation mixers\r\n\r\nfunction animateLights() {\r\n    const time = clock.getElapsedTime();\r\n\r\n    // Static variable to ensure the model and light are only added once\r\n    if (!animateLights.modelLoaded) {\r\n        const loader = new https_cdn_jsdelivr_net_npm_three_0_168_0_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_1__.GLTFLoader();\r\n        loader.load(\r\n            './low_poly_satellite/scene.gltf', // Replace with your model path\r\n            (gltf) => {\r\n                const customModel = gltf.scene;\r\n\r\n                // Scale and position the model\r\n                customModel.scale.set(0.003, 0.003, 0.003);\r\n                customModel.position.set(0, 9, 0);\r\n\r\n                // Create a PointLight and attach it to the model\r\n                const pointLight = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PointLight(0xffccaa, 1.5, 50); // Glowing light effect\r\n                pointLight.castShadow = true;\r\n                pointLight.position.set(0, 0, 0); // Centered on the model\r\n\r\n                // Group the model and the light together\r\n                const lightGroup = new https_cdn_jsdelivr_net_npm_three_0_168_0_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Group();\r\n                lightGroup.add(customModel);\r\n                lightGroup.add(pointLight);\r\n\r\n                // Add the group to the scene\r\n                scene.add(lightGroup);\r\n\r\n                // Store the group for animation\r\n                animateLights.lightGroup = lightGroup;\r\n            },\r\n            undefined,\r\n            (error) => {\r\n                console.error('Error loading the model:', error);\r\n            }\r\n        );\r\n\r\n        // Mark the model as loaded\r\n        animateLights.modelLoaded = true;\r\n    }\r\n\r\n    // Animate lights only if the light group exists\r\n    if (animateLights.lightGroup) {\r\n        const lightGroup = animateLights.lightGroup;\r\n\r\n        // Animate Point Light with its attached model (orbiting and rotation)\r\n        lightGroup.position.x = Math.sin(time * 0.5) * 13;\r\n        lightGroup.position.z = Math.cos(time * 0.5) * 13;\r\n        lightGroup.rotation.y += 0.01; // Slowly rotate the model\r\n    }\r\n\r\n    // Iterate through all lights in the scene and apply animations\r\n    scene.traverse((object) => {\r\n        if (object.isDirectionalLight) {\r\n            // Animate directional light (e.g., day-night cycle)\r\n           object.position.x = Math.sin(time) * 20;\r\n            //object.position.z = Math.cos(time) * 20;\r\n        }\r\n\r\n        \r\n    });\r\n}\r\n\r\n\r\n\r\nconst rotationTextElement = document.getElementById('rotationText'); // The 2D text div\r\nconst rotationLinkButton = document.getElementById('rotationLinkButton'); // The button\r\n\r\n// Define rotation ranges, their corresponding text, and link URLs\r\nconst rotationTextRanges = [\r\n    { min: 9, max: -15, text: \"Robo Code Youth Initiative is an Organization made by and one of my friends to  spread the  of robotics to the worlds younger generation, check out our website!\", link: \"https://robocodeyouthinitiative.com\" },\r\n    { min: -75, max: -125, text: \"During my high school years, I work at a chess club named Master Piece chess academy, I teach a variety of chess class levels\", link: \"https://masterpiecechessacademy.com/\" },\r\n    { min: -177, max: -237, text: \"During most of my freetime, I spent my time in my garage, which I transformed into a own personal makerspace with the money I made through my job, check out the projects I built there on my maker timeline\", link: \"https://gtamerlan.com/2/\" },\r\n    { min: -280, max: -310, text: \"To learn more about me check out my website or feel free to contact at thstudios0708@gmail.com\", link: \"https://gtamerlan.com/\" },\r\n];\r\n\r\n// Function to normalize the rotation to the range [-360, 360]\r\nfunction normalizeRotation(rotationInDegrees) {\r\n    return ((rotationInDegrees % 360) + 360) % 360 - 360;\r\n}\r\n\r\n// Function to determine the text and link based on the normalized rotation\r\nfunction getRotationData(rotationInDegrees) {\r\n    for (const range of rotationTextRanges) {\r\n        if (rotationInDegrees >= range.max && rotationInDegrees <= range.min) {\r\n            return { text: range.text, link: range.link };\r\n        }\r\n    }\r\n    return null; // Return null if no range matches\r\n}\r\n\r\n// Update the displayed text and button dynamically\r\nfunction updateRotationText() {\r\n    if (marsBase) {\r\n        // Convert rotation to degrees and normalize\r\n        let rotationInDegrees = marsBase.rotation.y * (180 / Math.PI);\r\n        rotationInDegrees = normalizeRotation(rotationInDegrees); // Normalize to [-360, 360]\r\n\r\n        // Get the text and link for the current rotation\r\n        const rotationData = getRotationData(rotationInDegrees);\r\n\r\n        if (rotationData) {\r\n            // Update the displayed text\r\n            rotationTextElement.textContent = rotationData.text;\r\n\r\n            // Update the button's link and show it\r\n            rotationLinkButton.style.display = \"block\";\r\n            rotationLinkButton.onclick = () => window.location.href = rotationData.link;\r\n        } else {\r\n            // Hide the button if no range matches\r\n            rotationTextElement.textContent = \"\";\r\n            rotationLinkButton.style.display = \"none\";\r\n        }\r\n    }\r\n}\r\n\r\n// Call `updateRotationText` at regular intervals or within a render loop\r\nsetInterval(updateRotationText, 100); // Adjust interval as needed\r\n\r\n\r\n\r\n\r\n// Modify your animate function to include text updates\r\nfunction animate() {\r\n    const deltaTime = clock.getDelta(); // Get the time between frames\r\n    requestAnimationFrame(animate);\r\n\r\n    // Update the rover's animation mixer\r\n    if (mixer) {\r\n        mixer.update(deltaTime); // Keep the rover animation running\r\n    }\r\n\r\n    // Update additional mixers\r\n    animateMixers.forEach((updateMixer) => updateMixer(deltaTime));\r\n\r\n    // Update lights\r\n    animateLights();\r\n\r\n    // Rotate the environment if dragging\r\n    rotateEnvironment();\r\n\r\n    // Update rotation text\r\n    updateRotationText();\r\n\r\n    // Update controls for smoother camera movement\r\n    controls.update();\r\n\r\n    // Render the scene with the camera\r\n    renderer.render(scene, camera);\r\n}\r\n\r\n\r\n\r\n// Handle window resize\r\nfunction onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\n// Initialize the scene\r\ninit();\r\nanimate();\r\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://tamerlans-portfolio-/./src/main.js?");

/***/ }),

/***/ "https://cdn.jsdelivr.net/npm/three@0.168.0/build/three.module.js":
false,

/***/ "https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/controls/OrbitControls.js":
false,

/***/ "https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/csm/CSM.js":
false,

/***/ "https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/csm/CSMHelper.js":
false,

/***/ "https://cdn.jsdelivr.net/npm/three@0.168.0/examples/jsm/loaders/GLTFLoader.js":
false

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && queue.d < 1) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = -1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && queue.d < 0 && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;